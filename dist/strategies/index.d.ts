import * as ecoVotingPower from './eco-voting-power';
import * as dpsNFTStrategy from './dps-nft-strategy';
import * as dpsNFTStrategyNova from './dps-nft-strategy-nova';
import * as nounsPower from './nouns-rfp-power';
import * as erc20Votes from './erc20-votes';
import * as erc20VotesWithOverride from './erc20-votes-with-override';
import * as antiWhale from './anti-whale';
import * as balancer from './balancer';
import * as balancerErc20InternalBalanceOf from './balancer-erc20-internal-balance-of';
import * as sunder from './sunder';
import * as balancerSmartPool from './balancer-smart-pool';
import * as contractCall from './contract-call';
import * as dextfVaults from './dextf-staked-in-vaults';
import * as dfynFarms from './dfyn-staked-in-farms';
import * as dfynVaults from './dfyn-staked-in-vaults';
import * as vDfynVault from './balance-in-vdfyn-vault';
import * as ensDomainsOwned from './ens-domains-owned';
import * as ensReverseRecord from './ens-reverse-record';
import * as ens10kClub from './ens-10k-club';
import * as ensAllClubDigits from './ens-all-club-digits';
import * as governorDelegator from './governor-delegator';
import * as erc20BalanceOf from './erc20-balance-of';
import * as erc20BalanceOfAt from './erc20-balance-of-at';
import * as erc20BalanceOfCoeff from './erc20-balance-of-coeff';
import * as erc20BalanceOfFixedTotal from './erc20-balance-of-fixed-total';
import * as erc20BalanceOfCv from './erc20-balance-of-cv';
import * as erc20WithBalance from './erc20-with-balance';
import * as erc20BalanceOfDelegation from './erc20-balance-of-delegation';
import * as erc20BalanceOfWithDelegation from './erc20-balance-of-with-delegation';
import * as erc20BalanceOfQuadraticDelegation from './erc20-balance-of-quadratic-delegation';
import * as erc20BalanceOfWeighted from './erc20-balance-of-weighted';
import * as ethalendBalanceOf from './ethalend-balance-of';
import * as prepoVesting from './prepo-vesting';
import * as mintoBalanceAll from './minto-balance-of-all';
import * as erc20BalanceOfIndexed from './erc20-balance-of-indexed';
import * as revest from './revest';
import * as erc20Price from './erc20-price';
import * as balanceOfWithMin from './balance-of-with-min';
import * as balanceOfWithThresholds from './balance-of-with-thresholds';
import * as balanceOfWithLinearVestingPower from './balance-of-with-linear-vesting-power';
import * as linearVestingPower from './linear-vesting-power';
import * as thresholds from './thresholds';
import * as ethBalance from './eth-balance';
import * as ethWithBalance from './eth-with-balance';
import * as ethWalletAge from './eth-wallet-age';
import * as multichain from './multichain';
import * as gooddollarMultichain from './gooddollar-multichain';
import * as makerDsChief from './maker-ds-chief';
import * as uni from './uni';
import * as yearnVault from './yearn-vault';
import * as fraxFinance from './frax-finance';
import * as moloch from './moloch';
import * as uniswap from './uniswap';
import * as faralandStaking from './faraland-staking';
import * as flashstake from './flashstake';
import * as pancake from './pancake';
import * as synthetix from './synthetix';
import * as aelinCouncil from './aelin-council';
import * as synthetixQuadratic from './synthetix-quadratic';
import * as synthetixQuadraticOne from './synthetix-quadratic_1';
import * as synthetixQuadraticTwo from './synthetix-quadratic_2';
import * as synthetixOne from './synthetix_1';
import * as synthetixNonQuadratic from './synthetix-non-quadratic';
import * as synthetixNonQuadraticOne from './synthetix-non-quadratic_1';
import * as synthetixNonQuadraticTwo from './synthetix-non-quadratic_2';
import * as ctoken from './ctoken';
import * as cream from './cream';
import * as esd from './esd';
import * as esdDelegation from './esd-delegation';
import * as stakedUniswap from './staked-uniswap';
import * as piedao from './piedao';
import * as ethReceived from './eth-received';
import * as erc20Received from './erc20-received';
import * as ethPhilanthropy from './eth-philanthropy';
import * as xDaiEasyStaking from './xdai-easy-staking';
import * as xDaiPOSDAOStaking from './xdai-posdao-staking';
import * as xDaiStakeHolders from './xdai-stake-holders';
import * as xDaiStakeDelegation from './xdai-stake-delegation';
import * as defidollar from './defidollar';
import * as aavegotchi from './aavegotchi';
import * as aavegotchiAgip from './aavegotchi-agip';
import * as aavegotchiAgip17 from './aavegotchi-agip-17';
import * as mithcash from './mithcash';
import * as dittomoney from './dittomoney';
import * as balancerUnipool from './balancer-unipool';
import * as sushiswap from './sushiswap';
import * as masterchef from './masterchef';
import * as stablexswap from './stablexswap';
import * as stakedKeep from './staked-keep';
import * as stakedDaomaker from './staked-daomaker';
import * as typhoon from './typhoon';
import * as delegation from './delegation';
import * as delegationWithOverrides from './delegation-with-overrides';
import * as withDelegation from './with-delegation';
import * as ticket from './ticket';
import * as work from './work';
import * as ticketValidity from './ticket-validity';
import * as validation from './validation';
import * as opium from './opium';
import * as ocean from './ocean-marketplace';
import * as ocean_v4 from './ocean-marketplace-v4';
import * as theGraphBalance from './the-graph-balance';
import * as theGraphDelegation from './the-graph-delegation';
import * as theGraphIndexing from './the-graph-indexing';
import * as whitelist from './whitelist';
import * as whitelistWeighted from './whitelist-weighted';
import * as tokenlon from './tokenlon';
import * as rebased from './rebased';
import * as pobHash from './pob-hash';
import * as totalAxionShares from './total-axion-shares';
import * as erc1155BalanceOf from './erc1155-balance-of';
import * as erc1155BalanceOfCv from './erc1155-balance-of-cv';
import * as erc1155WithMultiplier from './erc1155-with-multiplier';
import * as compLikeVotes from './comp-like-votes';
import * as governorAlpha from './governor-alpha';
import * as pagination from './pagination';
import * as rulerStakedToken from './ruler-staked-token';
import * as rulerStakedLP from './ruler-staked-lp';
import * as xcover from './xcover';
import * as niuStaked from './niu-staked';
import * as mushrooms from './mushrooms';
import * as curioCardsErc20Weighted from './curio-cards-erc20-weighted';
import * as saffronFinance from './saffron-finance';
import * as saffronFinanceV2 from './saffron-finance-v2';
import * as renNodes from './ren-nodes';
import * as reverseVotingEscrow from './reverse-voting-escrow';
import * as multisigOwners from './multisig-owners';
import * as trancheStaking from './tranche-staking';
import * as pepemon from './pepemon';
import * as erc1155AllBalancesOf from './erc1155-all-balances-of';
import * as trancheStakingLP from './tranche-staking-lp';
import * as masterchefPoolBalance from './masterchef-pool-balance';
import * as masterchefPoolBalancePrice from './masterchef-pool-balance-price';
import * as avnBalanceOfStaked from './avn-balance-of-staked';
import * as badgeth from './badgeth';
import * as api from './api';
import * as apiPost from './api-post';
import * as apiV2 from './api-v2';
import * as xseen from './xseen';
import * as molochAll from './moloch-all';
import * as molochLoot from './moloch-loot';
import * as erc721Enumerable from './erc721-enumerable';
import * as erc721WithMultiplier from './erc721-with-multiplier';
import * as protofiErc721TierWeighted from './protofi-erc721-tier-weighted';
import * as erc721WithTokenId from './erc721-with-tokenid';
import * as erc721WithTokenIdRangeWeights from './erc721-with-tokenid-range-weights';
import * as erc721WithTokenIdRangeWeightsSimple from './erc721-with-tokenid-range-weights-simple';
import * as erc721WithTokenIdWeighted from './erc721-with-tokenid-weighted';
import * as erc721WithMetadata from './erc721-with-metadata';
import * as erc721WithMetadataByOwnerOf from './erc721-with-metadata-by-ownerof';
import * as hoprUniLpFarm from './hopr-uni-lp-farm';
import * as erc721 from './erc721';
import * as erc721MultiRegistry from './erc721-multi-registry';
import * as apescape from './apescape';
import * as liftkitchen from './liftkitchen';
import * as coordinape from './coordinape';
import * as decentralandEstateSize from './decentraland-estate-size';
import * as decentralandWearableRariry from './decentraland-wearable-rarity';
import * as decentralandRentalLessors from './decentraland-rental-lessors';
import * as iotexBalance from './iotex-balance';
import * as iotexStakedBalance from './iotex-staked-balance';
import * as xrc20BalanceOf from './xrc20-balance-of';
import * as brightid from './brightid';
import * as inverseXINV from './inverse-xinv';
import * as modefi from './modefi';
import * as modefiStaking from './modefi-staking';
import * as spookyswap from './spookyswap';
import * as squadzPower from './squadz-power';
import * as glide from './glide';
import * as goldfinchVotingPower from './goldfinch-voting-power';
import * as goldfinchMembership from './goldfinch-membership';
import * as rnbwBalance from './rnbw-balance';
import * as celerSgnDelegation from './celer-sgn-delegation';
import * as balancerDelegation from './balancer-delegation';
import * as infinityProtocolPools from './infinityprotocol-liquidity-pools';
import * as aaveGovernancePower from './aave-governance-power';
import * as cake from './cake';
import * as aks from './aks';
import * as tomyumswap from './tomyumswap';
import * as planetFinance from './planet-finance';
import * as planetFinancev2 from './planet-finance-v2';
import * as impossibleFinance from './impossible-finance';
import * as immutableX from './immutable-x';
import * as ogn from './ogn';
import * as oolongswap from './oolongswap';
import * as zrxVotingPower from './zrx-voting-power';
import * as tombFinance from './tomb-finance';
import * as trancheStakingSLICE from './tranche-staking-slice';
import * as unipoolSameToken from './unipool-same-token';
import * as unipoolUniv2Lp from './unipool-univ2-lp';
import * as unipoolXSushi from './unipool-xsushi';
import * as poap from './poap';
import * as poapWithWeight from './poap-with-weight';
import * as poapWithWeightV2 from './poap-with-weight-v2';
import * as uniswapV3 from './uniswap-v3';
import * as uniswapV3Staking from './uniswap-v3-staking';
import * as l2Deversifi from './l2-deversifi';
import * as vestedDeversifi from './vested-deversifi';
import * as biswap from './biswap';
import * as cronaswap from './cronaswap';
import * as honeyswap from './honeyswap';
import * as eglVote from './egl-vote';
import * as mcnFarm from './mcn-farm';
import * as snowswap from './snowswap';
import * as meebitsdao from './meebitsdao';
import * as membership from './membership';
import * as holdsTokens from './holds-tokens';
import * as crucibleERC20BalanceOf from './crucible-erc20-balance-of';
import * as erc20TokenAndLpWeighted from './erc20-token-and-lp-weighted';
import * as crucibleERC20TokenAndLpWeighted from './crucible-erc20-token-and-lp-weighted';
import * as hasrock from './has-rock';
import * as flexaCapacityStaking from './flexa-capacity-staking';
import * as sunriseGamingUniv2Lp from './sunrisegaming-univ2-lp';
import * as sunriseGamingStaking from './sunrisegaming-staking';
import * as sUmamiHolders from './sumami-holders';
import * as singleStakingAutoCompoundBalanceOf from './single-staking-autocompound-balanceof';
import * as singleStakingPoolsBalanceOf from './single-staking-pools-balanceof';
import * as occStakeOf from './occ-stake-of';
import * as hoprStaking from './hopr-staking';
import * as hoprStakingS2 from './hopr-staking-s2';
import * as hoprStakingBySeason from './hopr-staking-by-season';
import * as hoprBridgedBalance from './hopr-bridged-balance';
import * as hoprStakeAndBalanceQV from './hopr-stake-and-balance-qv';
import * as lootCharacterGuilds from './loot-character-guilds';
import * as swapr from './swapr';
import * as cyberkongz from './cyberkongz';
import * as cyberkongzV2 from './cyberkongz-v2';
import * as cyberkongzV3 from './cyberkongz-v3';
import * as compLikeVotesInclusive from './comp-like-votes-inclusive';
import * as mstable from './mstable';
import * as hashesVoting from './hashes-voting';
import * as hashflowGovernancePower from './hashflow-governance-power';
import * as hashflowVeHft from './hashflow-vehft';
import * as podLeader from './pod-leader';
import * as aavegotchiWagmiGuild from './aavegotchi-wagmi-guild';
import * as polisBalance from './polis-balance';
import * as techQuadraticRankedChoice from './tech-quadratic-ranked-choice';
import * as mutantCatsStakersAndHolders from './mutant-cats-stakers-and-holders';
import * as vaultTokenLpBalance from './vault-token-lp-balance';
import * as singleStakingVaultBalanceOf from './single-staking-vault-balanceof';
import * as razorVoting from './razor-network-voting';
import * as svsStaking from './svs-staking';
import * as mcbBalanceFromGraph from './mcb-balance-from-graph';
import * as colonyReputation from './colony-reputation';
import * as radicleCommunityTokens from './radicle-community-tokens';
import * as digitalaxMonaQuickswap from './digitalax-mona-quickswap';
import * as digitalaxDecoToMona from './digitalax-deco-to-mona';
import * as digitalaxGenesisContribution from './digitalax-genesis-contribution';
import * as digitalaxLPStakers from './digitalax-lp-stakers';
import * as digitalaxMonaStakersMatic from './digitalax-mona-stakers-matic';
import * as digitalaxLPStakersMatic from './digitalax-lp-stakers-matic';
import * as galaxyNftWithScore from './galaxy-nft-with-score';
import * as galxeLoyaltyPoints from './galxe-loyalty-points';
import * as gatenetTotalStaked from './gatenet-total-staked';
import * as vesper from './vesper';
import * as thales from './thales';
import * as bscMvb from './bsc-mvb';
import * as coinswap from './coinswap';
import * as dgenesis from './dgenesis';
import * as votePowerAndShare from './vote-power-and-share';
import * as blockzerolabsCryptonauts from './blockzerolabs-cryptonauts';
import * as math from './math';
import * as pushVotingPower from './push-voting-power';
import * as stakedPSPBalance from './staked-psp-balance';
import * as erc20BalanceOfContractMultiplier from './erc20-balance-of-contract-multiplier';
import * as agave from './agave';
import * as juicebox from './juicebox';
import * as snetFarmers from './snet-farmers';
import * as snetStakers from './snet-stakers';
import * as snetLiquidityProviders from './snet-liquidity-providers';
import * as minMaxMcnFarm from './minmax-mcn-farm';
import * as unstackedToadzAndStackedToadzStakers from './unstackedtoadz-and-stackedtoadz-stakers';
import * as jadeSmrt from './jade-smrt';
import * as oceanDAOBrightID from './ocean-dao-brightid';
import * as saddleFinance from './saddle-finance';
import * as saddleFinanceV2 from './saddle-finance-v2';
import * as lydiaGovVault from './lydia-gov-vault';
import * as xkawaFarm from './xkawa-farm';
import * as darkforestScore from './darkforest-score';
import * as orangeReputationBasedVoting from './orange-reputation-based-voting';
import * as orangeReputationNftBasedVoting from './orange-reputation-nft-based-voting';
import * as squidDao from './squid-dao';
import * as pathBalanceStakedAndLocked from './path-balance-staked-and-locked';
import * as bottoDao from './botto-dao';
import * as genart from './genart';
import * as erc721MultiRegistryWeighted from './erc721-multi-registry-weighted';
import * as genomesdao from './genomesdao';
import * as zorro from './zorro';
import * as voltVotingPower from './volt-voting-power';
import * as balancerPoolid from './balancer-poolid';
import * as stakedBalancer from './staked-balancer';
import * as stakedUniswapModifiable from './staked-uniswap-modifiable';
import * as givethXdaiBalance from './giveth-xdai-balance';
import * as givethGnosisBalanceV2 from './giveth-gnosis-balance-v2';
import * as givethBalancerBalance from './giveth-balancer-balance';
import * as erc1155BalanceOfIds from './erc1155-balance-of-ids';
import * as erc1155BalanceOfIdsWeighted from './erc1155-balance-of-ids-weighted';
import * as erc1155weighted from './erc1155-weighted-by-id';
import * as stakersAndHolders from './stakers-and-holders';
import * as banksyDao from './banksy-dao';
import * as spacey2025 from './spacey2025';
import * as sandmanDao from './sandman-dao';
import * as ethercatsFounderSeries from './ethercats-founder-series';
import * as veBalanceOfAt from './ve-balance-of-at';
import * as veRibbon from './ve-ribbon';
import * as veRibbonVotingPower from './ve-ribbon-voting-power';
import * as chubbykaijudao from './chubbykaijudao';
import * as landDaoTiers from './landdao-token-tiers';
import * as defiplaza from './defiplaza';
import * as stakingClaimedUnclaimed from './staking-claimed-unclaimed';
import * as gysrStakingBalance from './gysr-staking-balance';
import * as gysrPendingRewards from './gysr-pending-rewards';
import * as gysrLPStakingBalance from './gysr-lp-staking-balance';
import * as wanakafarmStaking from './wanakafarm-staking';
import * as starsharks from './starsharks';
import * as printerFinancial from './printer-financial';
import * as ethercatsFoundersSeries from './ethercats-founders-series';
import * as potion from './potion';
import * as MinotaurMoney from './minotaur-money';
import * as safetyModuleBptPower from './safety-module-bpt-power';
import * as convFinance from './conv-finance';
import * as sdBoost from './sd-boost';
import * as capitalDaoStaking from './capitaldao-staking';
import * as erc20RebaseWrapper from './erc20-rebase-wrapper';
import * as wanakafarmLandIngame from './wanakafarm-land-ingame';
import * as meebitsDaoDelegation from './meebitsdao-delegation';
import * as starcatchersTopWindow from './starcatchers-top-window';
import * as gno from './gno';
import * as umaVoting from './uma-voting';
import * as masterchefPoolBalanceNoRewarddebt from './masterchef-pool-balance-no-rewarddebt';
import * as proofOfHumanity from './proof-of-humanity';
import * as samuraiLegendsGeneralsBalance from './samurailegends-generals-balance';
import * as dogsUnchained from './dogs-unchained';
import * as stakeDAOGovernanceUpdate from './stakedao-governance-update';
import * as umamiVoting from './umami-voting';
import * as liquidityTokenProvide from './liquidity-token-provide';
import * as gamiumVoting from './gamium-voting';
import * as citydaoSquareRoot from './citydao-square-root';
import * as recusalList from './recusal-list';
import * as rowdyRoos from './rowdy-roos';
import * as ethermon721 from './ethermon-erc721';
import * as etherorcsComboBalanceOf from './etherorcs-combo-balanceof';
import * as hedgey from './hedgey';
import * as hedgeyMulti from './hedgey-multi';
import * as hedgeyDelegate from './hedgey-delegate';
import * as sybilProtection from './sybil-protection';
import * as veBalanceOfAtNFT from './ve-balance-of-at-nft';
import * as genzeesFromSubgraph from './genzees-from-subgraph';
import * as ginFinance from './gin-finance';
import * as positionGovernancePower from './position-governance-power';
import * as creditLp from './credit-lp';
import * as helix from './helix';
import * as arrakisFinance from './arrakis-finance';
import * as auraFinance from './aura-vlaura-vebal';
import * as auraFinanceWithOverrides from './aura-vlaura-vebal-with-overrides';
import * as auraBalanceOfVlauraVebal from './aura-balance-of-vlaura-vebal';
import * as auraBalanceOfSingleAsset from './aura-vault-balance-of-single-asset';
import * as rocketpoolNodeOperator from './rocketpool-node-operator';
import * as earthfundChildDaoStakingBalance from './earthfund-child-dao-staking-balance';
import * as unipilotVaultPilotBalance from './unipilot-vault-pilot-balance';
import * as sdBoostTWAVP from './sd-boost-twavp';
import * as apeswap from './apeswap';
import * as fortaShares from './forta-shares';
import * as solvVoucherClaimable from './solv-voucher-claimable';
import * as h2o from './h2o';
import * as dopamine from './dopamine';
import * as lrcL2SubgraphBalanceOf from './lrc-l2-subgraph-balance-of';
import * as lrcL2NftBalanceOf from './lrc-l2-nft-balance-of';
import * as lrcLPSubgraphBalanceOf from './lrc-lp-subgraph-balance-of';
import * as lrcNFTDAOSearch from './lrc-nft-dao-search';
import * as lrcNFTmult from './lrc-nft-search-mult';
import * as erc3525VestingVoucher from './erc3525-vesting-voucher';
import * as rariFuse from './rari-fuse';
import * as selfswap from './selfswap';
import * as xrookBalanceOfUnderlyingWeighted from './xrook-balance-of-underlying-weighted';
import * as bancorPoolTokenUnderlyingBalance from './bancor-pool-token-underlying-balance';
import * as orbsNetworkDelegation from './orbs-network-delegation';
import * as balanceOfSubgraph from './balance-of-subgraph';
import * as wagdieSubgraph from './wagdie-subgraph';
import * as erc3525FlexibleVoucher from './erc3525-flexible-voucher';
import * as erc721PairWeights from './erc721-pair-weights';
import * as harmonyStaking from './harmony-staking';
import * as echelonCachedErc1155Decay from './echelon-cached-erc1155-decay';
import * as orcaPod from './orca-pod';
import * as metropolisPod from './metropolis-pod';
import * as proxyProtocolErc20BalanceOf from './proxyprotocol-erc20-balance-of';
import * as proxyProtocolErc721BalanceOf from './proxyprotocol-erc721-balance-of';
import * as proxyProtocolErc1155BalanceOf from './proxyprotocol-erc1155-balance-of';
import * as arrowVesting from './arrow-vesting';
import * as tutellusProtocol from './tutellus-protocol';
import * as fightClub from './fight-club';
import * as tproStaking from './tpro-staking';
import * as safeVested from './safe-vested';
import * as riskharborUnderwriter from './riskharbor-underwriter';
import * as otterspaceBadges from './otterspace-badges';
import * as syntheticNounsClaimerOwner from './synthetic-nouns-with-claimer';
import * as depositInSablierStream from './deposit-in-sablier-stream';
import * as echelonWalletPrimeAndCachedKey from './echelon-wallet-prime-and-cached-key';
import * as nation3VotesWIthDelegations from './nation3-votes-with-delegations';
import * as aavegotchiAgip37WapGhst from './aavegotchi-agip-37-wap-ghst';
import * as aavegotchiAgip37GltrStakedLp from './aavegotchi-agip-37-gltr-staked-lp';
import * as posichainStaking from './posichain-staking';
import * as posichainTotalBalance from './posichain-total-balance';
import * as erc20TokensPerUni from './erc20-tokens-per-uni';
import * as bancorStandardRewardsUnderlyingBalance from './bancor-standard-rewards-underlying-balance';
import * as sdVoteBoost from './sd-vote-boost';
import * as sdVoteBoostTWAVP from './sd-vote-boost-twavp';
import * as clqdrBalanceWithLp from './clqdr-balance-with-lp';
import * as ninechroniclesStakedAndDcc from './ninechronicles-staked-and-dcc';
import * as spreadsheet from './spreadsheet';
import * as offchainDelegation from './offchain-delegation';
import * as dslaParametricStakingServiceCredits from './dsla-parametric-staking-service-credits';
import * as rep3Badges from './rep3-badges';
import * as marsecosystem from './marsecosystem';
import * as ari10StakingLocked from './ari10-staking-locked';
import * as multichainSerie from './multichain-serie';
import * as ctsiStaking from './ctsi-staking';
import * as ctsiStakingPool from './ctsi-staking-pool';
import * as skaleDelegationWeighted from './skale-delegation-weighted';
import * as reliquary from './reliquary';
import * as acrossStakedAcx from './across-staked-acx';
import * as vstaPoolStaking from './vsta-pool-staking';
import * as lodestarVesting from './lodestar-vesting';
import * as lodestarStakedLp from './lodestar-staked-lp';
import * as jpegdLockedJpegOf from './jpegd-locked-jpeg-of';
import * as litDaoGovernance from './lit-dao-governance';
import * as babywealthyclub from './babywealthyclub';
import * as battleflyVGFLYAndStakedGFLY from './battlefly-vgfly-and-staked-gfly';
import * as nexonArmyNFT from './nexon-army-nft';
import * as moonbeamFreeBalance from './moonbeam-free-balance';
import * as stakedotlinkVesting from './stakedotlink-vesting';
import * as pspInSePSP2Balance from './psp-in-sepsp2-balance';
import * as pdnBalancesAndVests from './pdn-balances-and-vests';
import * as izumiVeiZi from './izumi-veizi';
import * as lqtyProxyStakers from './lqty-proxy-stakers';
import * as echelonWalletPrimeAndCachedKeyGated from './echelon-wallet-prime-and-cached-key-gated';
import * as rdntCapitalVoting from './rdnt-capital-voting';
import * as stakedDefiBalance from './staked-defi-balance';
import * as degenzooErc721AnimalsWeighted from './degenzoo-erc721-animals-weighted';
import * as capVotingPower from './cap-voting-power';
import * as zunamiPoolGaugeAggregatedBalanceOf from './zunami-pool-gauge-aggregated-balance-of';
import * as erc721CollateralHeld from './erc721-collateral-held';
import * as starlayVeBalanceOfLockerId from './starlay-ve-balance-of-locker-id';
import * as winrStaking from './winr-staking';
import * as spaceid from './spaceid';
declare const strategies: {
    'cap-voting-power': typeof capVotingPower;
    'izumi-veizi': typeof izumiVeiZi;
    'eco-voting-power': typeof ecoVotingPower;
    'forta-shares': typeof fortaShares;
    'across-staked-acx': typeof acrossStakedAcx;
    'ethermon-erc721': typeof ethermon721;
    'etherorcs-combo-balanceof': typeof etherorcsComboBalanceOf;
    'recusal-list': typeof recusalList;
    'landdao-token-tiers': typeof landDaoTiers;
    'giveth-balancer-balance': typeof givethBalancerBalance;
    'giveth-xdai-balance': typeof givethXdaiBalance;
    'giveth-gnosis-balance-v2': typeof givethGnosisBalanceV2;
    'nouns-rfp-power': typeof nounsPower;
    coordinape: typeof coordinape;
    'anti-whale': typeof antiWhale;
    balancer: typeof balancer;
    sunder: typeof sunder;
    'balancer-smart-pool': typeof balancerSmartPool;
    'lit-dao-governance': typeof litDaoGovernance;
    'balancer-erc20-internal-balance-of': typeof balancerErc20InternalBalanceOf;
    'balance-in-vdfyn-vault': typeof vDfynVault;
    'erc20-received': typeof erc20Received;
    'contract-call': typeof contractCall;
    defiplaza: typeof defiplaza;
    'dextf-staked-in-vaults': typeof dextfVaults;
    'dfyn-staked-in-farms': typeof dfynFarms;
    'dfyn-staked-in-vaults': typeof dfynVaults;
    'dps-nft-strategy': typeof dpsNFTStrategy;
    'dps-nft-strategy-nova': typeof dpsNFTStrategyNova;
    'eth-received': typeof ethReceived;
    'eth-philanthropy': typeof ethPhilanthropy;
    'ens-domains-owned': typeof ensDomainsOwned;
    'ens-reverse-record': typeof ensReverseRecord;
    'ens-10k-club': typeof ens10kClub;
    'ens-all-club-digits': typeof ensAllClubDigits;
    'governor-delegator': typeof governorDelegator;
    'erc20-balance-of': typeof erc20BalanceOf;
    'erc20-balance-of-at': typeof erc20BalanceOfAt;
    'erc20-votes': typeof erc20Votes;
    'erc20-votes-with-override': typeof erc20VotesWithOverride;
    'erc721-multi-registry-weighted': typeof erc721MultiRegistryWeighted;
    'erc20-balance-of-fixed-total': typeof erc20BalanceOfFixedTotal;
    'erc20-balance-of-cv': typeof erc20BalanceOfCv;
    'erc20-balance-of-coeff': typeof erc20BalanceOfCoeff;
    'erc20-with-balance': typeof erc20WithBalance;
    'erc20-balance-of-delegation': typeof erc20BalanceOfDelegation;
    'erc20-balance-of-with-delegation': typeof erc20BalanceOfWithDelegation;
    'erc20-balance-of-quadratic-delegation': typeof erc20BalanceOfQuadraticDelegation;
    'erc20-balance-of-weighted': typeof erc20BalanceOfWeighted;
    'minto-balance-of-all': typeof mintoBalanceAll;
    'erc20-balance-of-indexed': typeof erc20BalanceOfIndexed;
    'erc20-price': typeof erc20Price;
    'ethalend-balance-of': typeof ethalendBalanceOf;
    'balance-of-with-min': typeof balanceOfWithMin;
    'balance-of-with-thresholds': typeof balanceOfWithThresholds;
    thresholds: typeof thresholds;
    'eth-balance': typeof ethBalance;
    'eth-with-balance': typeof ethWithBalance;
    'eth-wallet-age': typeof ethWalletAge;
    'maker-ds-chief': typeof makerDsChief;
    erc721: typeof erc721;
    'erc721-enumerable': typeof erc721Enumerable;
    'erc721-with-multiplier': typeof erc721WithMultiplier;
    'protofi-erc721-tier-weighted': typeof protofiErc721TierWeighted;
    'erc721-with-tokenid': typeof erc721WithTokenId;
    'erc721-with-tokenid-range-weights': typeof erc721WithTokenIdRangeWeights;
    'erc721-with-tokenid-range-weights-simple': typeof erc721WithTokenIdRangeWeightsSimple;
    'erc721-with-tokenid-weighted': typeof erc721WithTokenIdWeighted;
    'erc721-with-metadata': typeof erc721WithMetadata;
    'erc721-with-metadata-by-ownerof': typeof erc721WithMetadataByOwnerOf;
    'erc721-multi-registry': typeof erc721MultiRegistry;
    'erc1155-balance-of': typeof erc1155BalanceOf;
    'erc1155-balance-of-cv': typeof erc1155BalanceOfCv;
    'prepo-vesting': typeof prepoVesting;
    multichain: typeof multichain;
    'gooddollar-multichain': typeof gooddollarMultichain;
    uni: typeof uni;
    'frax-finance': typeof fraxFinance;
    'yearn-vault': typeof yearnVault;
    moloch: typeof moloch;
    masterchef: typeof masterchef;
    sushiswap: typeof sushiswap;
    uniswap: typeof uniswap;
    'faraland-staking': typeof faralandStaking;
    flashstake: typeof flashstake;
    pancake: typeof pancake;
    synthetix: typeof synthetix;
    'aelin-council': typeof aelinCouncil;
    'synthetix-quadratic': typeof synthetixQuadratic;
    'synthetix-quadratic_1': typeof synthetixQuadraticOne;
    'synthetix-quadratic_2': typeof synthetixQuadraticTwo;
    synthetix_1: typeof synthetixOne;
    'synthetix-non-quadratic': typeof synthetixNonQuadratic;
    'synthetix-non-quadratic_1': typeof synthetixNonQuadraticOne;
    'synthetix-non-quadratic_2': typeof synthetixNonQuadraticTwo;
    ctoken: typeof ctoken;
    cream: typeof cream;
    'staked-uniswap': typeof stakedUniswap;
    esd: typeof esd;
    'esd-delegation': typeof esdDelegation;
    piedao: typeof piedao;
    'xdai-easy-staking': typeof xDaiEasyStaking;
    'xdai-posdao-staking': typeof xDaiPOSDAOStaking;
    'xdai-stake-holders': typeof xDaiStakeHolders;
    'xdai-stake-delegation': typeof xDaiStakeDelegation;
    defidollar: typeof defidollar;
    aavegotchi: typeof aavegotchi;
    'aavegotchi-agip': typeof aavegotchiAgip;
    'aavegotchi-agip-17': typeof aavegotchiAgip17;
    mithcash: typeof mithcash;
    stablexswap: typeof stablexswap;
    dittomoney: typeof dittomoney;
    'staked-keep': typeof stakedKeep;
    'staked-daomaker': typeof stakedDaomaker;
    'balancer-unipool': typeof balancerUnipool;
    typhoon: typeof typhoon;
    delegation: typeof delegation;
    'delegation-with-overrides': typeof delegationWithOverrides;
    'with-delegation': typeof withDelegation;
    ticket: typeof ticket;
    work: typeof work;
    'ticket-validity': typeof ticketValidity;
    validation: typeof validation;
    opium: typeof opium;
    'ocean-marketplace': typeof ocean;
    'ocean-marketplace-v4': typeof ocean_v4;
    'the-graph-balance': typeof theGraphBalance;
    'the-graph-delegation': typeof theGraphDelegation;
    'the-graph-indexing': typeof theGraphIndexing;
    whitelist: typeof whitelist;
    'whitelist-weighted': typeof whitelistWeighted;
    tokenlon: typeof tokenlon;
    rebased: typeof rebased;
    'pob-hash': typeof pobHash;
    'total-axion-shares': typeof totalAxionShares;
    'comp-like-votes': typeof compLikeVotes;
    'governor-alpha': typeof governorAlpha;
    pagination: typeof pagination;
    'ruler-staked-token': typeof rulerStakedToken;
    'ruler-staked-lp': typeof rulerStakedLP;
    xcover: typeof xcover;
    'niu-staked': typeof niuStaked;
    mushrooms: typeof mushrooms;
    'curio-cards-erc20-weighted': typeof curioCardsErc20Weighted;
    'ren-nodes': typeof renNodes;
    'reverse-voting-escrow': typeof reverseVotingEscrow;
    'multisig-owners': typeof multisigOwners;
    'tranche-staking': typeof trancheStaking;
    pepemon: typeof pepemon;
    'erc1155-all-balances-of': typeof erc1155AllBalancesOf;
    'erc1155-with-multiplier': typeof erc1155WithMultiplier;
    'saffron-finance': typeof saffronFinance;
    'saffron-finance-v2': typeof saffronFinanceV2;
    'tranche-staking-lp': typeof trancheStakingLP;
    'masterchef-pool-balance': typeof masterchefPoolBalance;
    'masterchef-pool-balance-price': typeof masterchefPoolBalancePrice;
    'avn-balance-of-staked': typeof avnBalanceOfStaked;
    api: typeof api;
    'api-post': typeof apiPost;
    'api-v2': typeof apiV2;
    xseen: typeof xseen;
    'moloch-all': typeof molochAll;
    'moloch-loot': typeof molochLoot;
    'hopr-uni-lp-farm': typeof hoprUniLpFarm;
    apescape: typeof apescape;
    liftkitchen: typeof liftkitchen;
    'decentraland-estate-size': typeof decentralandEstateSize;
    'decentraland-wearable-rarity': typeof decentralandWearableRariry;
    'decentraland-rental-lessors': typeof decentralandRentalLessors;
    brightid: typeof brightid;
    'inverse-xinv': typeof inverseXINV;
    modefi: typeof modefi;
    'modefi-staking': typeof modefiStaking;
    'iotex-balance': typeof iotexBalance;
    'iotex-staked-balance': typeof iotexStakedBalance;
    'xrc20-balance-of': typeof xrc20BalanceOf;
    spookyswap: typeof spookyswap;
    'squadz-power': typeof squadzPower;
    glide: typeof glide;
    'goldfinch-voting-power': typeof goldfinchVotingPower;
    'goldfinch-membership': typeof goldfinchMembership;
    'rnbw-balance': typeof rnbwBalance;
    'celer-sgn-delegation': typeof celerSgnDelegation;
    'balancer-delegation': typeof balancerDelegation;
    'infinityprotocol-liquidity-pools': typeof infinityProtocolPools;
    'aave-governance-power': typeof aaveGovernancePower;
    cake: typeof cake;
    aks: typeof aks;
    tomyumswap: typeof tomyumswap;
    'planet-finance': typeof planetFinance;
    'planet-finance-v2': typeof planetFinancev2;
    ogn: typeof ogn;
    oolongswap: typeof oolongswap;
    'impossible-finance': typeof impossibleFinance;
    'immutable-x': typeof immutableX;
    badgeth: typeof badgeth;
    'zrx-voting-power': typeof zrxVotingPower;
    'tomb-finance': typeof tombFinance;
    'tranche-staking-slice': typeof trancheStakingSLICE;
    'unipool-same-token': typeof unipoolSameToken;
    'unipool-univ2-lp': typeof unipoolUniv2Lp;
    'unipool-xsushi': typeof unipoolXSushi;
    poap: typeof poap;
    'poap-with-weight': typeof poapWithWeight;
    'poap-with-weight-v2': typeof poapWithWeightV2;
    'uniswap-v3': typeof uniswapV3;
    'uniswap-v3-staking': typeof uniswapV3Staking;
    'l2-deversifi': typeof l2Deversifi;
    'vested-deversifi': typeof vestedDeversifi;
    biswap: typeof biswap;
    cronaswap: typeof cronaswap;
    honeyswap: typeof honeyswap;
    'egl-vote': typeof eglVote;
    'mcn-farm': typeof mcnFarm;
    snowswap: typeof snowswap;
    meebitsdao: typeof meebitsdao;
    'crucible-erc20-balance-of': typeof crucibleERC20BalanceOf;
    'erc20-token-and-lp-weighted': typeof erc20TokenAndLpWeighted;
    'crucible-erc20-token-and-lp-weighted': typeof crucibleERC20TokenAndLpWeighted;
    'has-rock': typeof hasrock;
    'flexa-capacity-staking': typeof flexaCapacityStaking;
    'sunrisegaming-univ2-lp': typeof sunriseGamingUniv2Lp;
    'sunrisegaming-staking': typeof sunriseGamingStaking;
    'single-staking-autocompound-balanceof': typeof singleStakingAutoCompoundBalanceOf;
    'single-staking-pools-balanceof': typeof singleStakingPoolsBalanceOf;
    'hopr-staking': typeof hoprStaking;
    'hopr-staking-s2': typeof hoprStakingS2;
    'hopr-staking-by-season': typeof hoprStakingBySeason;
    'hopr-stake-and-balance-qv': typeof hoprStakeAndBalanceQV;
    'hopr-bridged-balance': typeof hoprBridgedBalance;
    'occ-stake-of': typeof occStakeOf;
    swapr: typeof swapr;
    'holds-tokens': typeof holdsTokens;
    'loot-character-guilds': typeof lootCharacterGuilds;
    cyberkongz: typeof cyberkongz;
    'cyberkongz-v2': typeof cyberkongzV2;
    'cyberkongz-v3': typeof cyberkongzV3;
    'comp-like-votes-inclusive': typeof compLikeVotesInclusive;
    mstable: typeof mstable;
    'hashes-voting': typeof hashesVoting;
    'hashflow-governance-power': typeof hashflowGovernancePower;
    'hashflow-vehft': typeof hashflowVeHft;
    'pod-leader': typeof podLeader;
    'aavegotchi-wagmi-guild': typeof aavegotchiWagmiGuild;
    'polis-balance': typeof polisBalance;
    'vault-token-lp-balance': typeof vaultTokenLpBalance;
    'single-staking-vault-balanceof': typeof singleStakingVaultBalanceOf;
    'mutant-cats-stakers-and-holders': typeof mutantCatsStakersAndHolders;
    'razor-network-voting': typeof razorVoting;
    'svs-staking': typeof svsStaking;
    'mcb-balance-from-graph': typeof mcbBalanceFromGraph;
    'radicle-community-tokens': typeof radicleCommunityTokens;
    'digitalax-mona-quickswap': typeof digitalaxMonaQuickswap;
    'digitalax-deco-to-mona': typeof digitalaxDecoToMona;
    'digitalax-genesis-contribution': typeof digitalaxGenesisContribution;
    'digitalax-lp-stakers': typeof digitalaxLPStakers;
    'digitalax-mona-stakers-matic': typeof digitalaxMonaStakersMatic;
    'digitalax-lp-stakers-matic': typeof digitalaxLPStakersMatic;
    'colony-reputation': typeof colonyReputation;
    'galaxy-nft-with-score': typeof galaxyNftWithScore;
    'galxe-loyalty-points': typeof galxeLoyaltyPoints;
    'gatenet-total-staked': typeof gatenetTotalStaked;
    vesper: typeof vesper;
    thales: typeof thales;
    'tech-quadratic-ranked-choice': typeof techQuadraticRankedChoice;
    'bsc-mvb': typeof bscMvb;
    coinswap: typeof coinswap;
    dgenesis: typeof dgenesis;
    'vote-power-and-share': typeof votePowerAndShare;
    'blockzerolabs-cryptonauts': typeof blockzerolabsCryptonauts;
    math: typeof math;
    'push-voting-power': typeof pushVotingPower;
    'staked-psp-balance': typeof stakedPSPBalance;
    'erc20-balance-of-contract-multiplier': typeof erc20BalanceOfContractMultiplier;
    agave: typeof agave;
    juicebox: typeof juicebox;
    'snet-farmers': typeof snetFarmers;
    'snet-stakers': typeof snetStakers;
    'snet-liquidity-providers': typeof snetLiquidityProviders;
    'minmax-mcn-farm': typeof minMaxMcnFarm;
    'unstackedtoadz-and-stackedtoadz-stakers': typeof unstackedToadzAndStackedToadzStakers;
    'jade-smrt': typeof jadeSmrt;
    'ocean-dao-brightid': typeof oceanDAOBrightID;
    'saddle-finance': typeof saddleFinance;
    'saddle-finance-v2': typeof saddleFinanceV2;
    membership: typeof membership;
    'lydia-gov-vault': typeof lydiaGovVault;
    'xkawa-farm': typeof xkawaFarm;
    'darkforest-score': typeof darkforestScore;
    'orange-reputation-based-voting': typeof orangeReputationBasedVoting;
    'orange-reputation-nft-based-voting': typeof orangeReputationNftBasedVoting;
    'squid-dao': typeof squidDao;
    'botto-dao': typeof bottoDao;
    genart: typeof genart;
    genomesdao: typeof genomesdao;
    'path-balance-staked-and-locked': typeof pathBalanceStakedAndLocked;
    'sumami-holders': typeof sUmamiHolders;
    zorro: typeof zorro;
    'volt-voting-power': typeof voltVotingPower;
    'balancer-poolid': typeof balancerPoolid;
    'staked-balancer': typeof stakedBalancer;
    'staked-uniswap-modifiable': typeof stakedUniswapModifiable;
    'erc1155-balance-of-ids': typeof erc1155BalanceOfIds;
    'erc1155-balance-of-ids-weighted': typeof erc1155BalanceOfIdsWeighted;
    'erc1155-weighted-by-id': typeof erc1155weighted;
    'stakers-and-holders': typeof stakersAndHolders;
    'banksy-dao': typeof banksyDao;
    spacey2025: typeof spacey2025;
    'sandman-dao': typeof sandmanDao;
    'ethercats-founder-series': typeof ethercatsFounderSeries;
    've-balance-of-at': typeof veBalanceOfAt;
    've-ribbon': typeof veRibbon;
    've-ribbon-voting-power': typeof veRibbonVotingPower;
    chubbykaijudao: typeof chubbykaijudao;
    revest: typeof revest;
    'staking-claimed-unclaimed': typeof stakingClaimedUnclaimed;
    'gysr-staking-balance': typeof gysrStakingBalance;
    'gysr-pending-rewards': typeof gysrPendingRewards;
    'gysr-lp-staking-balance': typeof gysrLPStakingBalance;
    'wanakafarm-staking': typeof wanakafarmStaking;
    starsharks: typeof starsharks;
    'printer-financial': typeof printerFinancial;
    'ethercats-founders-series': typeof ethercatsFoundersSeries;
    potion: typeof potion;
    'safety-module-bpt-power': typeof safetyModuleBptPower;
    'minotaur-money': typeof MinotaurMoney;
    'conv-finance': typeof convFinance;
    'sd-boost': typeof sdBoost;
    'capitaldao-staking': typeof capitalDaoStaking;
    'erc20-rebase-wrapper': typeof erc20RebaseWrapper;
    'wanakafarm-land-ingame': typeof wanakafarmLandIngame;
    'meebitsdao-delegation': typeof meebitsDaoDelegation;
    'starcatchers-top-window': typeof starcatchersTopWindow;
    gno: typeof gno;
    'gno-vote-weight': typeof gno;
    'uma-voting': typeof umaVoting;
    'masterchef-pool-balance-no-rewarddebt': typeof masterchefPoolBalanceNoRewarddebt;
    'proof-of-humanity': typeof proofOfHumanity;
    'sybil-protection': typeof sybilProtection;
    'samurailegends-generals-balance': typeof samuraiLegendsGeneralsBalance;
    'dogs-unchained': typeof dogsUnchained;
    'stakedao-governance-update': typeof stakeDAOGovernanceUpdate;
    'umami-voting': typeof umamiVoting;
    'liquidity-token-provide': typeof liquidityTokenProvide;
    'gamium-voting': typeof gamiumVoting;
    'citydao-square-root': typeof citydaoSquareRoot;
    'rowdy-roos': typeof rowdyRoos;
    hedgey: typeof hedgey;
    'hedgey-multi': typeof hedgeyMulti;
    'hedgey-delegate': typeof hedgeyDelegate;
    've-balance-of-at-nft': typeof veBalanceOfAtNFT;
    'genzees-from-subgraph': typeof genzeesFromSubgraph;
    'gin-finance': typeof ginFinance;
    'position-governance-power': typeof positionGovernancePower;
    'credit-lp': typeof creditLp;
    helix: typeof helix;
    'arrakis-finance': typeof arrakisFinance;
    'aura-vlaura-vebal': typeof auraFinance;
    'aura-vlaura-vebal-with-overrides': typeof auraFinanceWithOverrides;
    'aura-balance-of-vlaura-vebal': typeof auraBalanceOfVlauraVebal;
    'aura-vault-balance-of-single-asset': typeof auraBalanceOfSingleAsset;
    'rocketpool-node-operator': typeof rocketpoolNodeOperator;
    'earthfund-child-dao-staking-balance': typeof earthfundChildDaoStakingBalance;
    'sd-boost-twavp': typeof sdBoostTWAVP;
    'unipilot-vault-pilot-balance': typeof unipilotVaultPilotBalance;
    'solv-voucher-claimable': typeof solvVoucherClaimable;
    'balance-of-with-linear-vesting-power': typeof balanceOfWithLinearVestingPower;
    'linear-vesting-power': typeof linearVestingPower;
    apeswap: typeof apeswap;
    h2o: typeof h2o;
    dopamine: typeof dopamine;
    'lrc-l2-subgraph-balance-of': typeof lrcL2SubgraphBalanceOf;
    'lrc-l2-nft-balance-of': typeof lrcL2NftBalanceOf;
    'lrc-lp-subgraph-balance-of': typeof lrcLPSubgraphBalanceOf;
    'lrc-nft-dao-search': typeof lrcNFTDAOSearch;
    'lrc-nft-search-mult': typeof lrcNFTmult;
    'rari-fuse': typeof rariFuse;
    'bancor-pool-token-underlying-balance': typeof bancorPoolTokenUnderlyingBalance;
    selfswap: typeof selfswap;
    'erc3525-vesting-voucher': typeof erc3525VestingVoucher;
    'xrook-balance-of-underlying-weighted': typeof xrookBalanceOfUnderlyingWeighted;
    'orbs-network-delegation': typeof orbsNetworkDelegation;
    'balance-of-subgraph': typeof balanceOfSubgraph;
    'wagdie-subgraph': typeof wagdieSubgraph;
    'erc721-pair-weights': typeof erc721PairWeights;
    'harmony-staking': typeof harmonyStaking;
    'echelon-cached-erc1155-decay': typeof echelonCachedErc1155Decay;
    'erc3525-flexible-voucher': typeof erc3525FlexibleVoucher;
    'orca-pod': typeof orcaPod;
    'metropolis-pod': typeof metropolisPod;
    'proxyprotocol-erc20-balance-of': typeof proxyProtocolErc20BalanceOf;
    'proxyprotocol-erc721-balance-of': typeof proxyProtocolErc721BalanceOf;
    'proxyprotocol-erc1155-balance-of': typeof proxyProtocolErc1155BalanceOf;
    'posichain-staking': typeof posichainStaking;
    'posichain-total-balance': typeof posichainTotalBalance;
    'arrow-vesting': typeof arrowVesting;
    'tutellus-protocol': typeof tutellusProtocol;
    'fight-club': typeof fightClub;
    'tpro-staking': typeof tproStaking;
    'safe-vested': typeof safeVested;
    'riskharbor-underwriter': typeof riskharborUnderwriter;
    'otterspace-badges': typeof otterspaceBadges;
    'synthetic-nouns-with-claimer': typeof syntheticNounsClaimerOwner;
    'deposit-in-sablier-stream': typeof depositInSablierStream;
    'echelon-wallet-prime-and-cached-key': typeof echelonWalletPrimeAndCachedKey;
    'nation3-votes-with-delegations': typeof nation3VotesWIthDelegations;
    'aavegotchi-agip-37-wap-ghst': typeof aavegotchiAgip37WapGhst;
    'aavegotchi-agip-37-gltr-staked-lp': typeof aavegotchiAgip37GltrStakedLp;
    'erc20-tokens-per-uni': typeof erc20TokensPerUni;
    'bancor-standard-rewards-underlying-balance': typeof bancorStandardRewardsUnderlyingBalance;
    'sd-vote-boost': typeof sdVoteBoost;
    'sd-vote-boost-twavp': typeof sdVoteBoostTWAVP;
    'clqdr-balance-with-lp': typeof clqdrBalanceWithLp;
    spreadsheet: typeof spreadsheet;
    'offchain-delegation': typeof offchainDelegation;
    'ninechronicles-staked-and-dcc': typeof ninechroniclesStakedAndDcc;
    'dsla-parametric-staking-service-credits': typeof dslaParametricStakingServiceCredits;
    'rep3-badges': typeof rep3Badges;
    marsecosystem: typeof marsecosystem;
    'ari10-staking-locked': typeof ari10StakingLocked;
    'multichain-serie': typeof multichainSerie;
    'ctsi-staking': typeof ctsiStaking;
    'ctsi-staking-pool': typeof ctsiStakingPool;
    'skale-delegation-weighted': typeof skaleDelegationWeighted;
    reliquary: typeof reliquary;
    'vsta-pool-staking': typeof vstaPoolStaking;
    'jpegd-locked-jpeg-of': typeof jpegdLockedJpegOf;
    'lodestar-vesting': typeof lodestarVesting;
    'lodestar-staked-lp': typeof lodestarStakedLp;
    babywealthyclub: typeof babywealthyclub;
    'battlefly-vgfly-and-staked-gfly': typeof battleflyVGFLYAndStakedGFLY;
    'nexon-army-nft': typeof nexonArmyNFT;
    'moonbeam-free-balance': typeof moonbeamFreeBalance;
    'stakedotlink-vesting': typeof stakedotlinkVesting;
    'psp-in-sepsp2-balance': typeof pspInSePSP2Balance;
    'pdn-balances-and-vests': typeof pdnBalancesAndVests;
    'lqty-proxy-stakers': typeof lqtyProxyStakers;
    'echelon-wallet-prime-and-cached-key-gated': typeof echelonWalletPrimeAndCachedKeyGated;
    'rdnt-capital-voting': typeof rdntCapitalVoting;
    'staked-defi-balance': typeof stakedDefiBalance;
    'degenzoo-erc721-animals-weighted': typeof degenzooErc721AnimalsWeighted;
    'zunami-pool-gauge-aggregated-balance-of': typeof zunamiPoolGaugeAggregatedBalanceOf;
    'erc721-collateral-held': typeof erc721CollateralHeld;
    'starlay-ve-balance-of-locker-id': typeof starlayVeBalanceOfLockerId;
    'winr-staking': typeof winrStaking;
    spaceid: typeof spaceid;
};
export default strategies;
